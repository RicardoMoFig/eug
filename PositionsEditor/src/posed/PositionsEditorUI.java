/*
 * PositionsEditorUI.java
 *
 * Created on May 14, 2007, 11:02 AM
 */

package posed;

import eug.parser.EUGFileIO;
import eug.shared.GenericList;
import eug.shared.GenericObject;
import eug.shared.ObjectVariable;
import eug.shared.Style;
import eug.shared.WritableObject;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.BufferedWriter;
import java.io.File;
import java.io.IOException;
import java.util.Locale;
import javax.swing.AbstractListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;

/**
 *
 * @author Michael Myers
 */
public class PositionsEditorUI extends javax.swing.JFrame {
    
    private static final String APP_NAME    = "EU3 Positions Editor";
    private static final String APP_VERSION = "Beta 2";
    
    private MapPanel mapPanel;
    
    private File mapDir;
    private File positionsFile;
    GenericObject positions;
    private GameVersion gameVersion;
    
    private boolean hasUnsavedChanges;
    
    public PositionsEditorUI(String mapFileName, GameVersion gameVersion, boolean useLocalization) {
        this.gameVersion = gameVersion;
        initComponents();
        
        load(mapFileName, gameVersion, useLocalization);
        
        setLocationRelativeTo(null);
        jSplitPane1.setDividerLocation(0.8);
    }
    
    private void load(String mapFileName, GameVersion gameVersion, boolean useLocalization) {
        File mapFile = new File(mapFileName);
        mapDir = mapFile.getParentFile();

        File mainDir = mapDir.getParentFile();
        if (useLocalization)
            Text.initText(mainDir);

        Map map = new Map(mapFile.getAbsolutePath(), gameVersion, useLocalization);

        positionsFile = new File(mapFile.getParent() + "/" + map.getString("positions"));

        positions = EUGFileIO.load(positionsFile);
        mapPanel = new MapPanel(map, mapDir, positions, gameVersion);
        mapScrollPane.setViewportView(mapPanel);

        provinceList.setModel(new ProvListModel());
        provinceList.setPrototypeCellValue("99999 - Province Name"); // so it doesn't have to calculate the maximum width

        MapPanelMouseListener listener = new MapPanelMouseListener();
        mapPanel.addMouseListener(listener);
        mapPanel.addMouseMotionListener(listener);

        pack();
        setLocationRelativeTo(null);
        setTitle(APP_NAME + " [" + positionsFile.getPath() + "]");
        validateFile();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        javax.swing.JPanel jPanel2 = new javax.swing.JPanel();
        javax.swing.JScrollPane jScrollPane2 = new javax.swing.JScrollPane();
        positionTextArea = new javax.swing.JEditorPane();
        javax.swing.JPanel jPanel3 = new javax.swing.JPanel();
        mapScrollPane = new javax.swing.JScrollPane();
        javax.swing.JPanel jPanel1 = new javax.swing.JPanel();
        javax.swing.JScrollPane jScrollPane1 = new javax.swing.JScrollPane();
        provinceList = new javax.swing.JList();
        goToProvButton = new javax.swing.JButton();
        javax.swing.JMenuBar menuBar = new javax.swing.JMenuBar();
        javax.swing.JMenu fileMenu = new javax.swing.JMenu();
        saveMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        javax.swing.JSeparator jSeparator1 = new javax.swing.JSeparator();
        exitMenuItem = new javax.swing.JMenuItem();
        javax.swing.JMenu viewMenu = new javax.swing.JMenu();
        zoomInMenuItem = new javax.swing.JMenuItem();
        zoomOutMenuItem = new javax.swing.JMenuItem();
        javax.swing.JSeparator jSeparator2 = new javax.swing.JSeparator();
        showPositionsMenuItem = new javax.swing.JCheckBoxMenuItem();
        javax.swing.JMenu helpMenu = new javax.swing.JMenu();
        aboutMenuItem = new javax.swing.JMenuItem();

        FormListener formListener = new FormListener();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle(APP_NAME);
        addWindowListener(formListener);

        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        jPanel2.setLayout(new java.awt.BorderLayout());

        positionTextArea.setEditable(false);
        positionTextArea.setEditorKit(new eug.syntax.EUGEditorKit());
        jScrollPane2.setViewportView(positionTextArea);

        jPanel2.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jSplitPane1.setRightComponent(jPanel2);

        jPanel3.setLayout(new java.awt.BorderLayout());
        jPanel3.add(mapScrollPane, java.awt.BorderLayout.CENTER);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Provinces"));
        jPanel1.setLayout(new java.awt.BorderLayout());

        provinceList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        provinceList.addMouseListener(formListener);
        provinceList.addListSelectionListener(formListener);
        jScrollPane1.setViewportView(provinceList);

        jPanel1.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        goToProvButton.setText("Center on province");
        goToProvButton.addActionListener(formListener);
        jPanel1.add(goToProvButton, java.awt.BorderLayout.SOUTH);

        jPanel3.add(jPanel1, java.awt.BorderLayout.WEST);

        jSplitPane1.setLeftComponent(jPanel3);

        getContentPane().add(jSplitPane1, java.awt.BorderLayout.CENTER);

        fileMenu.setText("File");

        saveMenuItem.setText("Save");
        saveMenuItem.addActionListener(formListener);
        fileMenu.add(saveMenuItem);

        saveAsMenuItem.setText("Save as...");
        saveAsMenuItem.addActionListener(formListener);
        fileMenu.add(saveAsMenuItem);
        fileMenu.add(jSeparator1);

        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(formListener);
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        viewMenu.setText("View");

        zoomInMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_EQUALS, java.awt.event.InputEvent.CTRL_MASK));
        zoomInMenuItem.setText("Zoom in");
        zoomInMenuItem.addActionListener(formListener);
        viewMenu.add(zoomInMenuItem);

        zoomOutMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_MINUS, java.awt.event.InputEvent.CTRL_MASK));
        zoomOutMenuItem.setText("Zoom out");
        zoomOutMenuItem.addActionListener(formListener);
        viewMenu.add(zoomOutMenuItem);
        viewMenu.add(jSeparator2);

        showPositionsMenuItem.setText("Show positions on map");
        showPositionsMenuItem.setToolTipText("Not currently functional");
        showPositionsMenuItem.setEnabled(false);
        showPositionsMenuItem.addActionListener(formListener);
        viewMenu.add(showPositionsMenuItem);

        menuBar.add(viewMenu);

        helpMenu.setText("Help");

        aboutMenuItem.setText("About");
        aboutMenuItem.addActionListener(formListener);
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        pack();
    }

    // Code for dispatching events from components to event handlers.

    private class FormListener implements java.awt.event.ActionListener, java.awt.event.MouseListener, java.awt.event.WindowListener, javax.swing.event.ListSelectionListener {
        FormListener() {}
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            if (evt.getSource() == goToProvButton) {
                PositionsEditorUI.this.goToProvButtonActionPerformed(evt);
            }
            else if (evt.getSource() == saveMenuItem) {
                PositionsEditorUI.this.saveMenuItemActionPerformed(evt);
            }
            else if (evt.getSource() == saveAsMenuItem) {
                PositionsEditorUI.this.saveAsMenuItemActionPerformed(evt);
            }
            else if (evt.getSource() == exitMenuItem) {
                PositionsEditorUI.this.exitMenuItemActionPerformed(evt);
            }
            else if (evt.getSource() == zoomInMenuItem) {
                PositionsEditorUI.this.zoomInMenuItemActionPerformed(evt);
            }
            else if (evt.getSource() == zoomOutMenuItem) {
                PositionsEditorUI.this.zoomOutMenuItemActionPerformed(evt);
            }
            else if (evt.getSource() == showPositionsMenuItem) {
                PositionsEditorUI.this.showPositionsMenuItemActionPerformed(evt);
            }
            else if (evt.getSource() == aboutMenuItem) {
                PositionsEditorUI.this.aboutMenuItemActionPerformed(evt);
            }
        }

        public void mouseClicked(java.awt.event.MouseEvent evt) {
            if (evt.getSource() == provinceList) {
                PositionsEditorUI.this.provinceListMouseClicked(evt);
            }
        }

        public void mouseEntered(java.awt.event.MouseEvent evt) {
        }

        public void mouseExited(java.awt.event.MouseEvent evt) {
        }

        public void mousePressed(java.awt.event.MouseEvent evt) {
        }

        public void mouseReleased(java.awt.event.MouseEvent evt) {
        }

        public void windowActivated(java.awt.event.WindowEvent evt) {
        }

        public void windowClosed(java.awt.event.WindowEvent evt) {
        }

        public void windowClosing(java.awt.event.WindowEvent evt) {
            if (evt.getSource() == PositionsEditorUI.this) {
                PositionsEditorUI.this.formWindowClosing(evt);
            }
        }

        public void windowDeactivated(java.awt.event.WindowEvent evt) {
        }

        public void windowDeiconified(java.awt.event.WindowEvent evt) {
        }

        public void windowIconified(java.awt.event.WindowEvent evt) {
        }

        public void windowOpened(java.awt.event.WindowEvent evt) {
        }

        public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
            if (evt.getSource() == provinceList) {
                PositionsEditorUI.this.provinceListValueChanged(evt);
            }
        }
    }// </editor-fold>//GEN-END:initComponents

    private void provinceListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_provinceListMouseClicked
        if (evt.getClickCount() == 2) {
            int prov = provinceList.getSelectedIndex();
            GenericObject position = positions.getChild(Integer.toString(prov));
            EditorDialog dialog = new EditorDialog(this,
                    mapPanel.createImage(prov),
                    position,
                    mapPanel.getMap().isLand(prov) ? gameVersion.getLand() : gameVersion.getSea());
            dialog.setVisible(true);
            if (dialog.isSaveChanges()) {
                System.out.println("Province " + prov + ":");
                System.out.println("Old entry:");
                System.out.println(position);
                System.out.println("New entry:");
                System.out.println(dialog.getPositions());
                if (position != null) {
                    position.clear();
                    if (dialog.getPositions() != null)
                        position.addAllChildren(dialog.getPositions());
                } else if (dialog.getPositions() != null ) {
                    positions.addChild(dialog.getPositions());
                }
                
                hasUnsavedChanges = true;
            }
        }
    }//GEN-LAST:event_provinceListMouseClicked

    private void zoomInMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zoomInMenuItemActionPerformed
        mapPanel.zoomIn();
        mapPanel.repaint();
        mapScrollPane.setViewport(mapScrollPane.getViewport());
    }//GEN-LAST:event_zoomInMenuItemActionPerformed

    private void zoomOutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zoomOutMenuItemActionPerformed
        mapPanel.zoomOut();
        mapPanel.repaint();
        mapScrollPane.setViewport(mapScrollPane.getViewport());
    }//GEN-LAST:event_zoomOutMenuItemActionPerformed

    private void showPositionsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showPositionsMenuItemActionPerformed
        mapPanel.setPaintPositions(showPositionsMenuItem.isSelected());
        mapPanel.repaint();
    }//GEN-LAST:event_showPositionsMenuItemActionPerformed

    private void saveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuItemActionPerformed
        if (!hasUnsavedChanges) {
            JOptionPane.showMessageDialog(this, "There are no changes to save.");
            return;
        }
        
        if (!EUGFileIO.save(positions, positionsFile.getAbsolutePath(), EUGFileIO.NO_COMMENT, true, POSITIONS_STYLE))
            JOptionPane.showMessageDialog(this, "Failed to save", "Error", JOptionPane.ERROR_MESSAGE);
    }//GEN-LAST:event_saveMenuItemActionPerformed

    private void saveAsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAsMenuItemActionPerformed
        if (!hasUnsavedChanges) {
            JOptionPane.showMessageDialog(this, "There are no changes to save.");
            return;
        }
        
        JFileChooser chooser = new JFileChooser(mapDir);
        int choice = chooser.showSaveDialog(this);
        if (choice == JFileChooser.APPROVE_OPTION) {
            positionsFile = chooser.getSelectedFile();
            if (!EUGFileIO.save(positions, positionsFile.getAbsolutePath(), EUGFileIO.NO_COMMENT, true, POSITIONS_STYLE))
                JOptionPane.showMessageDialog(this, "Failed to save", "Error", JOptionPane.ERROR_MESSAGE);
            setTitle(APP_NAME + " [" + positionsFile.getPath() + "]");
        }
    }//GEN-LAST:event_saveAsMenuItemActionPerformed

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        doClose();
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        doClose();
    }//GEN-LAST:event_formWindowClosing

    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed
        JOptionPane.showMessageDialog(this, APP_NAME + " " + APP_VERSION + "\nBy MichaelM");
    }//GEN-LAST:event_aboutMenuItemActionPerformed

    private void goToProvButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goToProvButtonActionPerformed
        int prov = provinceList.getSelectedIndex();
        mapPanel.goToProv(prov);
        mapPanel.flashProvince(prov, 2);
    }//GEN-LAST:event_goToProvButtonActionPerformed

    private void provinceListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_provinceListValueChanged
        int prov = provinceList.getSelectedIndex();
        GenericObject position = positions.getChild(Integer.toString(prov)); // -1 because there is no entry for 0 (PTI)
        if (position != null)
            positionTextArea.setText(position.toString(POSITIONS_STYLE));
        else
            positionTextArea.setText("# No previous data");
        positionTextArea.setCaretPosition(0);
    }//GEN-LAST:event_provinceListValueChanged

    private static final GenericObject xy = EUGFileIO.loadFromString("x = double y = double");
    private void validateFile() {
        for (GenericObject obj : positions.children) {
            if (mapPanel.getMap().isLand(Integer.parseInt(obj.name))) {
                validateObject(obj.name, obj, gameVersion.getLand());
            } else {
                validateObject(obj.name, obj, gameVersion.getSea());
            }
        }
    }

    private void validateObject(String name, GenericObject positions, GenericObject validation) {
        for (WritableObject wo : positions.getAllWritable()) {
            if (wo instanceof GenericObject) {
                GenericObject obj = (GenericObject) wo;
                String objName = obj.name.equals("") ? "empty" : obj.name;
                GenericObject subValidation = validation.getChild(objName);

                if (subValidation != null) {
                    validateObject(name, obj, subValidation);
                } else if (validation.getString(objName).equals("xy")) {
                    // special case: xy is really an object
                    validateObject(name, obj, xy);
                } else {
                    System.err.println("Unknown object name in " + name + " (" + validation.name + "): " + obj.name);
                }
            } else if (wo instanceof ObjectVariable) {
                String varname = ((ObjectVariable) wo).varname;
                String subv = validation.getString(varname);

                if (subv.equals("")) {
                    System.err.println("Unknown variable name in " + name + ": " + varname);
                }
            } else if (wo instanceof GenericList) {
                System.err.println("Did not expect list: " + ((GenericList)wo).getName());
            }
        }
    }

    private void doClose() {
        if (hasUnsavedChanges) {
            int choice = JOptionPane.showConfirmDialog(this, "You have unsaved changes. Do you want to save them before exiting?");
            if (choice == JOptionPane.YES_OPTION) {
                saveMenuItemActionPerformed(null);
            } else if (choice == JOptionPane.CANCEL_OPTION) {
                return;
            }
        }
        dispose();
    }
//    /**
//     * @param args the command line arguments
//     */
//    public static void main(String args[]) {
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new PositionsEditorUI().setVisible(true);
//            }
//        });
//    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenuItem exitMenuItem;
    javax.swing.JButton goToProvButton;
    javax.swing.JSplitPane jSplitPane1;
    javax.swing.JScrollPane mapScrollPane;
    javax.swing.JEditorPane positionTextArea;
    javax.swing.JList provinceList;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JMenuItem saveMenuItem;
    javax.swing.JCheckBoxMenuItem showPositionsMenuItem;
    javax.swing.JMenuItem zoomInMenuItem;
    javax.swing.JMenuItem zoomOutMenuItem;
    // End of variables declaration//GEN-END:variables

    private static final Style POSITIONS_STYLE = new Style() {

        public String getTab(int depth) {
            return Style.DEFAULT.getTab(depth);
        }

        public String getEqualsSign(int depth) {
            return Style.DEFAULT.getEqualsSign(depth);
        }

        public String getCommentStart() {
            return Style.DEFAULT.getCommentStart();
        }

        public void printTab(BufferedWriter bw, int depth) throws IOException {
            Style.DEFAULT.printTab(bw, depth);
        }

        public void printEqualsSign(BufferedWriter bw, int depth) throws IOException {
            Style.DEFAULT.printEqualsSign(bw, depth);
        }

        public void printCommentStart(BufferedWriter bw, int depth) throws IOException {
            Style.DEFAULT.printCommentStart(bw, depth);
        }

        public void printHeaderCommentStart(BufferedWriter bw, int depth) throws IOException {
            // Do nothing
        }

        public void printHeaderCommentEnd(BufferedWriter bw, int depth) throws IOException {
            // Do nothing
        }

        public boolean isInline(GenericObject obj) {
            return obj.isEmpty();
        }

        public boolean newLineAfterObject() {
            return Style.DEFAULT.newLineAfterObject();
        }
    };

    private final class ProvListModel extends AbstractListModel {

        public ProvListModel() {
        }

        @Override
        public int getSize() {
            return Integer.parseInt(mapPanel.getMap().getString("max_provinces"));
        }

        @Override
        public Object getElementAt(int index) {
            return Integer.toString(index) + " - " + mapPanel.getProvinceData().getProvByID(index).getName();
        }
    }

    private final class MapPanelMouseListener extends MouseAdapter {

        public MapPanelMouseListener() {
        }

        @Override
        public void mouseClicked(MouseEvent e) {
            doClick(e);
        }

        @Override
        public void mouseDragged(MouseEvent e) {
            doClick(e);
        }

        private void doClick(MouseEvent e) {
            ProvinceData.Province p = mapPanel.getProvinceAt(e.getPoint());
            if (p == null || p.getId() == 0) {
                return;
            }
            if (e.getClickCount() == 2) {
                provinceListMouseClicked(e);
            } else {
                provinceList.setSelectedIndex(p.getId());
                provinceList.ensureIndexIsVisible(p.getId());
                mapPanel.flashProvince(p.getId());
            }
        }
    }

    private static final class MapFileFilter extends FileFilter {

        public MapFileFilter() {
        }

        @Override
        public boolean accept(File f) {
            return f.isDirectory() || f.getName().toLowerCase(Locale.ENGLISH).endsWith(".map");
        }

        @Override
        public String getDescription() {
            return "Map files";
        }
    }
}
